package br.com.alfred.desktop.view.corretoras;

import br.com.alfred.desktop.exceptions.GenericException;
import br.com.alfred.desktop.model.Corretora;
import br.com.alfred.desktop.service.CorretoraServiceImpl;
import br.com.alfred.desktop.utils.BeanUtil;
import br.com.alfred.desktop.utils.ViewUtil;
import br.com.alfred.desktop.view.interfaces.IDataViewer;
import br.com.alfred.desktop.view.interfaces.IManagerViewer;
import java.util.Date;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;

/**
 * View responsável por cadastras novas corretoras.
 * 
 * @author Thiago Teodoro Rodrigues <thiago.teodoro.rodrigues@gmail.com>
 */
public class CorretorasManager extends javax.swing.JInternalFrame implements IManagerViewer {
 
    private IDataViewer refDataViewer;
    private JDesktopPane refMain;
    private Corretora corretoraForEdit;
    private Boolean edit;
    
    /** Creates new form CorretorasRegister */
    public CorretorasManager(IDataViewer refDataViewer, JDesktopPane refMain, Boolean edit, Corretora corretoraForEdit) throws GenericException {
        
        //Inicializando componentes
        initComponents();
        this.refMain = refMain;
        this.refDataViewer = refDataViewer;
        this.edit = edit;
        ViewUtil.setDefaultButtonInternalFrame(this, executeCorretoraJButton);
        
        if(edit){
            
            if(corretoraForEdit.isActive()){
                
                //Configurando tela para edit
                this.corretoraForEdit = corretoraForEdit;
                this.setFrameToEditProcess();
            } else {
                
                //Não é possivel realizar a edição de corretoras desativadas
                throw new GenericException("Não é permitido edição de corretoras desátivadas!", JOptionPane.WARNING_MESSAGE);               
            }                        
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        descriptonJLabel = new javax.swing.JLabel();
        descriptionJTextField = new javax.swing.JTextField();
        executeCorretoraJButton = new javax.swing.JButton();

        setClosable(true);
        setTitle("Incluir Corretora");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        descriptonJLabel.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        descriptonJLabel.setText("Nome da Corretora : ");

        executeCorretoraJButton.setText("Incluir");
        executeCorretoraJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeCorretoraJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(descriptonJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(descriptionJTextField)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(220, 220, 220)
                .addComponent(executeCorretoraJButton)
                .addContainerGap(220, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(descriptonJLabel)
                    .addComponent(descriptionJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(executeCorretoraJButton)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void executeCorretoraJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeCorretoraJButtonActionPerformed
        
        //Descobrindo se é uma edição ou uma inserção
        if(this.edit){
            
            this.corretoraForEdit.setName(this.descriptionJTextField.getText());
            
            //Realizando inserção.
            CorretoraServiceImpl corretoraService = BeanUtil.getBean(CorretoraServiceImpl.class);
            Corretora updateCorretora =  corretoraService.safeUpdate(this.corretoraForEdit);            
            
            if(updateCorretora != null){

                //Recarregando tela anterior        
                this.refDataViewer.reloadMainTable();

                //Garantindo Fechamento Correto do JInternalFrame
                this.closeAndDeallocateMemoryFrame();
            }                         
        } else{
            
            //Realizando inserção.
            CorretoraServiceImpl corretoraService = BeanUtil.getBean(CorretoraServiceImpl.class);
            Corretora insertedCorretora =  corretoraService.safeInsert(descriptionJTextField.getText());

            if(insertedCorretora != null){

                //Recarregando tela anterior        
                this.refDataViewer.reloadMainTable();

                //Garantindo Fechamento Correto do JInternalFrame
                this.closeAndDeallocateMemoryFrame();
            }     
        }          
    }//GEN-LAST:event_executeCorretoraJButtonActionPerformed

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        
        //Garantindo Fechamento Correto do JInternalFrame
        this.closeAndDeallocateMemoryFrame();
    }//GEN-LAST:event_formInternalFrameClosed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField descriptionJTextField;
    private javax.swing.JLabel descriptonJLabel;
    private javax.swing.JButton executeCorretoraJButton;
    // End of variables declaration//GEN-END:variables

    
    /**
     * Método responsável por preencher os dados de edição na tela para que 
     * a mesma possa exibilos e também trocar todos os testos para inidicar
     * um processo de edição.
     */    
    @Override
    public void setFrameToEditProcess(){
        
        CorretorasManager.this.setTitle("Editar Corretora");
        CorretorasManager.this.executeCorretoraJButton.setText("Editar");       
        CorretorasManager.this.descriptionJTextField.setText(this.corretoraForEdit.getName());
    }
    
    
    /**
     * Método responsável por garantir que um JInternalFrame será fechado e 
     * desalocado da memória.     
     */
    @Override
    public void closeAndDeallocateMemoryFrame() {
            
        ViewUtil.closeAndDeallocateMemoryFrame(this, this.refMain);
    }
    
}
